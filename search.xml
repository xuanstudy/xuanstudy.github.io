<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符匹配</title>
      <link href="/2021/120940818.html"/>
      <url>/2021/120940818.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/%7DCEWNW2T%7BZWIVF5W43$RSZE.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209213543.png"></p><p>##算法设计<br><strong>算法关键:</strong></p><ol><li><p>遍历子数组左上角</p><p>i从0到n-b+1,j从0到m-a+1</p><p>遍历这个子数组，不相同ret就设为0；</p></li></ol><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>扫描n,m,a,b</p><p>A[n][m]存原矩阵</p><p>扫描q</p><p>q次循环</p><p>​    B[a][b]存子矩阵</p><p>​    调用算法</p><p>​    将结果存在ans数组中</p><p>代码很简单</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> B<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>按照算法写出代码</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> B<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>​    <img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209221358.png"></p><p>矩阵是char类型的，加上一些对缓冲区的修改</p><p>加入调试语句输出A、B</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209222958.png"></p><p>输入正常了</p><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209225653.png"></p><p>发现是比较时对B的调用有问题，改为列指针调用B</p><p>删除标志变量，改用更简洁的goto：但凡不相等，就到结束标记点</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//解决</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a[j][k]是子数组左上角元素</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hang <span class="token operator">=</span> j<span class="token punctuation">;</span> hang <span class="token operator">&lt;</span> j <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>hang<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lie <span class="token operator">=</span> k<span class="token punctuation">;</span> lie <span class="token operator">&lt;</span> k <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>lie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>hang<span class="token punctuation">]</span><span class="token punctuation">[</span>lie<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">goto</span> end<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                end<span class="token punctuation">:</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>valEn<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>样例正确</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209233042.png"></p><p>样例正确</p><p>但是WA了</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/QQ%E5%9B%BE%E7%89%8720211209233215.png"></p><p>习惯了。。。。</p><p>测试一下</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/QQ%E5%9B%BE%E7%89%8720211209233449.png"></p><p>确实没看出来有啥问题</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯，中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯，中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九宫格</title>
      <link href="/2021/120723611.html"/>
      <url>/2021/120723611.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>##算法设计：<br><strong>算法关键:</strong></p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯，中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯，中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/120416107.html"/>
      <url>/2021/120416107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公式求值</title>
      <link href="/2021/120456896.html"/>
      <url>/2021/120456896.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="公式求值"><a href="#公式求值" class="headerlink" title="公式求值"></a>公式求值</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204151746.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204151804.png"></p><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p><strong>算法关键:</strong> 组数A[n]存放从1到n的阶乘值，运算时直接调用即可。把i的k次方存到一个临时变量，下一个i^k只需要temp*i</p><ol><li><strong>把1到n的阶乘值依次存入A[n]</strong></li><li>直接循环累加即可</li></ol><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A[i]=(i+1)!</span></code></pre><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><ol><li><p>打印从1到n的阶乘表</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>条件编译语句内部是对应的输出语句，方便后续调试用的</p></li><li><p>进行循环累加</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A[n-1]=%d,A[n-m-1]=%d,A[n-i-1]=%d,A[m-1]=%d,pow(i,k)=%d"</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               A<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token operator">%</span><span class="token number">999101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="调试运行"><a href="#调试运行" class="headerlink" title="调试运行"></a>调试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204155647.png"></p><p>可以看到在第三次运行时由于i=n，在调用A[n-i-1]时数组下标越界</p><p>所以可以加一个<strong>缓冲量</strong></p><p>让A[i]表示i！,A[0]初始化为1，这样既解决了下标越界的问题，也使接下来的读取更加简洁</p><p>打印A[i]修改为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A[i]=i!</span>    A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>后边的运算部分就可以把所有的-1都删掉了</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A[n]=%d,A[n-m]=%d,A[n-i]=%d,A[m]=%d,pow(i,k)=%d"</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>               A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再次运行</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160153.png"></p><p>得到了正确的结果</p><p>开开心心提交</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160404.png"></p><p>果然难度不是吹的</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160453.png"></p><p>一大半的运行时错误</p><p>这个算法有问题，因为计算10000！是不可能的</p><p>稍微化简一下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算(a-b)!</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还是运行时错误</p><p>看了下答案，麻了</p><pre class=" language-c"><code class="language-c">import java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span>import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>public class Main <span class="token punctuation">{</span>    public final <span class="token keyword">static</span> BigDecimal P <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">999101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public final <span class="token keyword">static</span> BigDecimal TWO <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fac <span class="token operator">=</span> new <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">999101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span> mod <span class="token operator">=</span> <span class="token number">999101</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> new <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> BigDecimal n<span class="token punctuation">;</span>    public <span class="token keyword">static</span> BigDecimal m<span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new <span class="token function">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// n</span>        m <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// m</span>        k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// k</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">7349813</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">3590741</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 原题第四个数据貌似输出有误，正确应该输出为0</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">591101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">getfac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 预处理</span>            BigDecimal lc <span class="token operator">=</span> <span class="token function">Lucas</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lc<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getdp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 预处理系数</span>                <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0l</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最终值</span>                <span class="token keyword">int</span> i<span class="token punctuation">;</span>                <span class="token keyword">long</span> p <span class="token operator">=</span> <span class="token function">binpow</span><span class="token punctuation">(</span>TWO<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 预处理2^(n-k)求模: 二项式定理</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token punctuation">(</span>lc<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getdp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 计算系数求模</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1l</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> N <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// n % 999101</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> mod <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Lucas定理：组合数求模</span>    public <span class="token keyword">static</span> BigDecimal <span class="token function">Lucas</span><span class="token punctuation">(</span>BigDecimal n<span class="token punctuation">,</span> BigDecimal m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal ret <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ret <span class="token operator">=</span> ret                    <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token function">binpow</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">*</span> fac<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 预处理[0,P-1]的阶乘求模 0! 1！ 2！ 3! ..... 999100!</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getfac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1l</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 模意义下取幂算法 -- 取模的运算不会干涉乘法运算</span>    <span class="token comment" spellcheck="true">// 大数快速取幂</span>    public <span class="token keyword">static</span> BigDecimal <span class="token function">binpow</span><span class="token punctuation">(</span>BigDecimal a<span class="token punctuation">,</span> BigDecimal b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        BigDecimal res <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>TWO<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>TWO<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 普通数快速取幂</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">binpow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>            a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种题需要很强的数学知识。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人没了</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯，中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯，中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组不到的数字</title>
      <link href="/2021/120361679.html"/>
      <url>/2021/120361679.html</url>
      
        <content type="html"><![CDATA[<h1 id="组不到的数字"><a href="#组不到的数字" class="headerlink" title="组不到的数字"></a>组不到的数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203201401.png"></p><p>##算法设计<br>**算法关键:**可以穷举，但i需要在哪里停止？</p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>很简单</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><ol><li><p>数i=j*a+k*b,通过循环来模拟数值变化</p></li><li><p>如果不满足等式，就更新ans</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i ！<span class="token operator">=</span> a <span class="token operator">*</span> j <span class="token operator">+</span> b <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203202858.png"></p><p>呃，跟测试数据差了那么一点点</p><p>27=5*4+7，说明j有问题</p><p>写的时候先入为主认为b是a和b中较小的那个了，修改一下主方法</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> max<span class="token operator">=</span>a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">solve</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>让max等于a和b中较大的那个，传入max和a+b-max。（a+b）-max就是较小的那个。</p><p>再次运行结果没变，因为算法错了，不是但凡不相等就赋值。在i等于一个值时，总会有对应的j、k组合让等式不相等。这时应该使用标志变量</p><p>重新写一下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> a <span class="token operator">*</span> j <span class="token operator">+</span> b <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isEqual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就是在内层循环结束后，<strong>但凡找到了令等式成立的j、k组合就不进行赋值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203204342.png"></p><p>得到了正确的结果。</p><p>开开心心提交</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203204447.png"></p><p>超时了，不过比爆红要好。</p><p>该算法对于每一个i都要从头开始算一遍，非常的耗时间</p><p>建立一个二维数组dp[a][b],把i*a+j*b存到dp[i][j]中，这样对于下一个i循环是可以直接调取数组中相应位置的内容</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数i</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数j</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        k<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一行</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一行加a</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isEqual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次提交</p><p>时间更长了，原来是对于每个i又重新打了一个表，再次更改一下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数i</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数j</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一行</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一行加a</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    isEqual<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看起来多了个循环，实际上只打了一次表，将复杂度降了一个量级。</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203211635.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203214143.png"></p><p>还是差一点，那就让i从大向小找，这样找到的第一个数就是ans的值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> i <span class="token operator">></span> a<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>最终还是成功了</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203220519.png"></p><p>看到ac这一刻感觉一切都值了</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯，中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯，中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兰顿蚂蚁</title>
      <link href="/2021/120120761.html"/>
      <url>/2021/120120761.html</url>
      
        <content type="html"><![CDATA[<h1 id="兰顿蚂蚁"><a href="#兰顿蚂蚁" class="headerlink" title="兰顿蚂蚁"></a>兰顿蚂蚁</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201195850546.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201195931956.png"></p><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p><strong>关键词：</strong>模拟</p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><ol><li>地图存入n行m列的数组A[n][m];</li><li>坐标存入point[2];</li><li>方向dir;</li><li>步数step;</li></ol><p><strong>代码如下：</strong></p><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">//输入处理</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m行n列</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> map<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> dir<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实操时发现创建一个变量currDir表示当前方向，*dir表示所有方向会更方便</p><p>修改为：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">char</span> curDir<span class="token punctuation">;</span>    <span class="token keyword">char</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>carDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就可以通过dir下标的加减实现方向的改变了</p><p>但这时又出现了新的问题：</p><p>​    当curDir=‘L’时，若刚好为=需要右转（即下标+1）则会出现数组下标越界的情况。</p><p>所以我们可以设置两个“<strong>缓冲量</strong>”：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> dir<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>循环调用时下标从1到4即可。</p><p>故：</p><ol><li>对于“模拟”类型的问题设置一个“<strong>当前量</strong>”可以方便问题求解</li><li>数组下标越界可以通过设置“缓冲量”来解决</li></ol><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><p>核心：模拟蚂蚁的行为</p><ol><li>根据蚂蚁所在格子类型改变方向和格子类型：</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>map<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir<span class="token operator">=</span>dir<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>根据方向改变坐标：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>循环调用函数且step++：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> curStep<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> map<span class="token punctuation">,</span> curDir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curStep<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>curStep<span class="token operator">!=</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里使用了当型循环，用for也一样。</p></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201222527762.png"></p><p>。。。。</p><p>司空见惯了，找问题吧</p><hr><p>原来是忘记调用changeDir函数了，立即修改：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> curStep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir <span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> map<span class="token punctuation">,</span> curDir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curStep<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>curStep <span class="token operator">!=</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再次测试~</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201222527762.png"></p><p>呃。。。。</p><p>继续找吧，小事。</p><p>在适当位置增加输出语句进行调试：</p><ol><li><p>输入测试：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %c %d"</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201223527275.png" alt="image-20211201223527275"></p><p>立马找到了问题所在：</p><ol><li>curDir扫描失败：缓冲区里的空格赋值给了curDir，这是个老问题了。</li></ol><pre class=" language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解决：**%c前加空格忽略缓冲区中的空白字符**</p><pre class=" language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>step扫描失败：遇到了‘L’这个非法字符导致扫描停止。</li></ol></li></ol><p>​        修改后再次运行：<img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201224142614.png"></p><p>​        输入没问题了，但结果还是有问题</p><p>​    下面测试changeDir函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>map<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"type=%d "</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"curDir=%c "</span><span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        运行发现没有输出，说明没有调用该函数，而changePoint应该不会出问题，那么问题很可能    出在二维数组map的调用上。</p><p>​    新增一个列指针p，通过列指针p来实现二维数组map的调用</p><p>​    定义及初始化：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"type=%d "</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"curDir=%c "</span><span class="token punctuation">,</span> curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行发现终于出结果了：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231013379.png"></p><p>仔细一看怎么不对，答案是1，3</p><p>那应该是移动也就是changePoint出了问题</p><p>果然，题目中point[0]、point[1]分别表示行和列，而在函数中我因为习惯将其当成了坐标进行计算</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改后：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次运行：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231329428.png"></p><p>得到了正确的结果</p><p>开开心心提交：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231451702.png"></p><p>。。。</p><p>对了但没完全对，还有一些情况没考虑。</p><p>首先，发现在changrDir里少了个brake；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>改为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行发现样例结果错了，说明之前的样例通过是个巧合。</p><p>然后主方法用do-while会导致计数困难，还是使用fori</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行：</p><p>在changDir处加入输出语句，输出point坐标和该位置改变后的值</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211202121926497.png"></p><p>找到问题是应该先调用changeDir函数。犯这个错误的原因是一开始以为需要先走后改变方向。</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>修改后：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>样例输出正常，再次提交：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211202123208869.png"></p><p>终于迎来了胜利！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>模拟类题目需定义一套“<strong>当前量</strong>”来表示<strong>模拟对象当前的状态</strong></li><li>数组下标可能越界时可设置几个<strong>缓冲量</strong></li><li>思考二维数组还是以“<strong>i行j列</strong>”的形式进行</li><li>当二维数组行和列长度为变量时，想要作为实参传递需要定义<strong>列指针</strong>*p，*p=a[0];,将*p和列长n作为实参传入函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
